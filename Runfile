require "runfile-tasks"
require "byebug"
require "colsole"
require_relative 'lib/bashly'
require_relative 'helpers/example'
include Colsole

title   "Bashly Developer Toolbelt"
summary "Runfile tasks for building the Bashly gem"
version Bashly::VERSION

RunfileTasks::RubyGems.all 'bashly'
RunfileTasks::Testing.rspec

help   "Run interactive console"
action :console, :c do
  exec "bundle exec bin/console"
end

help   "Run shellcheck on all examples"
action :shellcheck do
  Example.executables.each do |example|
    if File.exist? example
      success = system "shellcheck #{example}"
      color = success ? 'txtgrn' : 'txtred'
      say "- shellcheck !#{color}!#{example}"
      exit 1 unless success
    else
      say "- skip       !txtcyn!#{example}"
    end
  end
end

help   "Generate changelog and append old changelog"
action :changelog do
  system "git changelog --save"
  # append older changelog (prior to switching to git-changelog)
  system "cat .changelog.old.md >> CHANGELOG.md"

  # Fix typos
  File.write "CHANGELOG.md", File.read("CHANGELOG.md").gsub('repeatableflags', 'repeatable flags')
end

help   "Append the content of bashly.yml to all example READMEs"
action :examples do
  # Patch the PATH to allow the extensible example to run properly
  ENV['PATH']="#{Dir.pwd}/examples/extensible:#{ENV['PATH']}"
  Example.all.each do |example|
    say example.dir
    example.regenerate_readme
  end
end

command :docker

help   "Build the docker images"
action :build, :b do
  system "docker build -t dannyben/bashly ."
  system "docker tag dannyben/bashly dannyben/bashly:#{Bashly::VERSION}"
  system "docker images |grep bashly"
end

help   "Smoke test the docker image"
action :test, :t do
  bashly_version = `docker run --rm dannyben/bashly --version`.chomp
  if bashly_version != Bashly::VERSION
    say "!txtred!FAIL: docker bashly version is #{bashly_version}, expected #{Bashly::VERSION}"
    exit 1
  else
    say "!txtgrn!PASS: docker bashly version is #{bashly_version}"
  end
end

help   "Push the docker images to Docker Hub"
action :push, :p do
  system "docker push dannyben/bashly"
  system "docker push dannyben/bashly:#{Bashly::VERSION}"
end

endcommand

require './debug.rb' if File.exist? 'debug.rb'