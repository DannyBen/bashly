require "runfile-tasks"
require "byebug"
require_relative 'lib/bashly'

title   "Bashly Developer Toolbelt"
summary "Runfile tasks for building the Bashly gem"
version Bashly::VERSION

RunfileTasks::RubyGems.all 'bashly'
RunfileTasks::Testing.rspec

help   "Run interactive console"
action :console, :c do
  run "bundle exec bin/console"
end

help   "Run shellcheck on all examples"
action :shellcheck do
  Example.executables.each do |example|
    success = system "shellcheck #{example}"
    color = success ? 'txtgrn' : 'txtred'
    say "- shellcheck !#{color}!#{example}"
    exit 1 unless success
  end
end

help   "Generate changelog and append old changelog"
action :changelog do
  run "git changelog --save"
  # append older changelog (prior to switching to git-changelog)
  run "cat .changelog.old.md >> CHANGELOG.md"
end

help   "Append the content of bashly.yml to all example READMEs"
action :examples do
  Example.all.each do |example|
    say example.dir
    example.regenerate_readme
    exit
  end
end

class Example
  class << self
    def dirs
      @dirs ||= Dir['examples/*'].select { |f| File.directory? f }
    end

    def all
      dirs.map { |dir| Example.new dir }
    end

    def executables
      all.map &:executable
    end
  end

  attr_reader :dir

  def initialize(dir)
    @dir = dir
  end

  def config
    @config ||= YAML.load_file(yaml_path)
  end

  def yaml
    @yaml ||= File.read(yaml_path).strip
  end

  def yaml_path
    "#{dir}/src/bashly.yml"
  end

  def readme_path
    "#{dir}/README.md"
  end

  def readme
    File.read readme_path
  end

  def test_commands
    File.read("#{dir}/test.sh").scan(/\.\/#{config['name']}.*/)
  end

  def test_output
    result = "```shell\n"
    test_commands.each do |command|
      result += "$ #{command}\n\n"
      Dir.chdir dir do
        result += `#{command}`
        result += "\n\n"
      end
    end
    result += "```\n\n"
    result
  end

  def regenerate_readme
    File.write readme_path, generated_readme
  end

  def generated_readme
    marker = '-----'
    content = readme.split(marker)[0].strip
    <<~EOF
    #{content}

    #{marker}

    ## `bashly.yml`

    ```yaml
    #{yaml}
    ```

    ## Generated script output

    #{test_output}

    EOF
  end

  def executable
    "#{dir}/#{config['name']}"
  end
end

require './debug.rb' if File.exist? 'debug.rb'