#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.root_command
root_command() {
  # :src/root_command.sh
  filename=${args[filename]}
  variable=${args[variable]}
  prefix=${args[--prefix]}
  
  if [[ $variable ]]; then
    eval "$(yaml_load "$filename" "$prefix")"
    value=${!variable}
  
    if [[ $value ]]; then
      echo "$variable=$value"
    else
      echo "variable not found: $variable"
    fi
  
  else
    yaml_load "$filename" "$prefix"
  
  fi
}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
yaml_usage() {
  if [[ -n $long_usage ]]; then
    printf "yaml - Sample application that uses the YAML functions\n"
    echo 
  else
    printf "yaml - Sample application that uses the YAML functions\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  yaml FILENAME [VARIABLE] [options]\n"
  printf "  yaml --help | -h\n"
  printf "  yaml --version | -v\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --prefix, -p PREFIX"
    printf "\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  FILENAME"
    printf "    The YAML file to read\n"
    echo
    
    # :argument.usage
    echo "  VARIABLE"
    printf "    Show only this variable\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  yaml settings.yml\n"
    printf "  yaml settings.yml --prefix config_\n"
    printf "  yaml settings.yml server_port\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# :src/lib/yaml.sh
# ---
# YAML parser
# This file is a part of Bashly standard library
# Does not support arrays, only hashes
#
# Source: https://stackoverflow.com/a/21189044/413924
#
# Usage:
#
#   yaml_load "settings.yml"             # print variables
#   yaml_load "settings.yml" "config_"   # use prefix
#   eval $(yaml_load "settings.yml")     # create variables in scope
#
# ---

yaml_load() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*'
   local fs

   fs=$(echo @|tr @ '\034')

   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:${s}[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  "$1" |
   awk -F"$fs" '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'"$prefix"'",vn, $2, $3);
      }
   }'
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    yaml_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="root"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[filename]=$1
    shift
  else
    printf "missing required argument: FILENAME\nusage: yaml FILENAME [VARIABLE] [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --prefix | -p )
      if [[ $2 ]]; then
        args[--prefix]="$2"
        shift
        shift
      else
        printf "%s\n" "--prefix requires an argument: --prefix, -p PREFIX"
        exit 1
      fi
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[filename]} ]]; then
        args[filename]=$1
        shift
      elif [[ ! ${args[variable]} ]]; then
        args[variable]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
    printf "bash version 4 or higher is required\n"
    exit 1
  fi

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  declare -a other_args
  parse_requirements "$@"

  if [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
