#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cli_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli - Sample application with nested commands\n"
    echo 
  else
    printf "cli - Sample application with nested commands\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli [command] [options]\n"
  printf "  cli [command] --help | -h\n"
  printf "  cli --version\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  dir    Directory commands"
  echo "  file   File commands"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
cli_dir_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli dir - Directory commands\n"
    echo 
  else
    printf "cli dir - Directory commands\n"
    echo 
  fi

  printf "Shortcut: d\n"
  echo

  printf "Usage:\n"
  printf "  cli dir [command] [options]\n"
  printf "  cli dir [command] --help | -h\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  list     Show files in the directory"
  echo "  remove   Remove directory"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_dir_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli dir list - Show files in the directory\n"
    echo 
  else
    printf "cli dir list - Show files in the directory\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli dir list PATH [options]\n"
  printf "  cli dir list --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  PATH"
    printf "    Directory path\n"
    echo

  fi
}

# :command.usage
cli_dir_remove_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli dir remove - Remove directory\n"
    echo 
  else
    printf "cli dir remove - Remove directory\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli dir remove PATH [options]\n"
  printf "  cli dir remove --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --force, -f"
    printf "    Remove even if when not empty\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  PATH"
    printf "    Directory path\n"
    echo

  fi
}

# :command.usage
cli_file_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli file - File commands\n"
    echo 
  else
    printf "cli file - File commands\n"
    echo 
  fi

  printf "Shortcut: f\n"
  echo

  printf "Usage:\n"
  printf "  cli file [command] [options]\n"
  printf "  cli file [command] --help | -h\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  show   Show file contents"
  echo "  edit   Edit the file"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_file_show_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli file show - Show file contents\n"
    echo 
  else
    printf "cli file show - Show file contents\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli file show PATH [options]\n"
  printf "  cli file show --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  PATH"
    printf "    Path to file\n"
    echo

  fi
}

# :command.usage
cli_file_edit_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli file edit - Edit the file\n"
    echo 
  else
    printf "cli file edit - Edit the file\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  cli file edit PATH [options]\n"
  printf "  cli file edit --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  PATH"
    printf "    Path to file\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.command_functions

# :command.function
cli_dir_list_command() {
  # :src/dir_list_command.sh
  echo "# this file is located in 'src/dir_list_command.sh'"
  echo "# code for 'cli dir list' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
cli_dir_remove_command() {
  # :src/dir_remove_command.sh
  echo "# this file is located in 'src/dir_remove_command.sh'"
  echo "# code for 'cli dir remove' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
cli_file_show_command() {
  # :src/file_show_command.sh
  echo "# this file is located in 'src/file_show_command.sh'"
  echo "# code for 'cli file show' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
cli_file_edit_command() {
  # :src/file_edit_command.sh
  echo "# this file is located in 'src/file_edit_command.sh'"
  echo "# code for 'cli file edit' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    cli_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  dir | d )
    action="dir"
    shift
    cli_dir_parse_requirements "$@"
    shift $#
    ;;    
  
  file | f )
    action="file"
    shift
    cli_file_parse_requirements "$@"
    shift $#
    ;;    
  
  * )
    cli_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
}

# :command.parse_requirements
cli_dir_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    cli_dir_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  list )
    action="list"
    shift
    cli_dir_list_parse_requirements "$@"
    shift $#
    ;;    
  
  remove )
    action="remove"
    shift
    cli_dir_remove_parse_requirements "$@"
    shift $#
    ;;    
  
  * )
    cli_dir_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
}

# :command.parse_requirements
cli_dir_list_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    cli_dir_list_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="dir list"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[path]=$1
    shift
  else
    printf "missing required argument: PATH\nusage: cli dir list PATH [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[path]} ]]; then
        args[path]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
}

# :command.parse_requirements
cli_dir_remove_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    cli_dir_remove_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="dir remove"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[path]=$1
    shift
  else
    printf "missing required argument: PATH\nusage: cli dir remove PATH [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --force | -f )
      args[--force]=1
      shift
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[path]} ]]; then
        args[path]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
}

# :command.parse_requirements
cli_file_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    cli_file_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  show )
    action="show"
    shift
    cli_file_show_parse_requirements "$@"
    shift $#
    ;;    
  
  edit )
    action="edit"
    shift
    cli_file_edit_parse_requirements "$@"
    shift $#
    ;;    
  
  * )
    cli_file_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
}

# :command.parse_requirements
cli_file_show_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    cli_file_show_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="file show"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[path]=$1
    shift
  else
    printf "missing required argument: PATH\nusage: cli file show PATH [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[path]} ]]; then
        args[path]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
}

# :command.parse_requirements
cli_file_edit_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    cli_file_edit_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="file edit"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[path]=$1
    shift
  else
    printf "missing required argument: PATH\nusage: cli file edit PATH [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[path]} ]]; then
        args[path]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  parse_requirements "$@"

  if [[ $action == "dir" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_dir_usage
    else
      cli_dir_command
    fi
  
  elif [[ $action == "dir list" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_dir_list_usage
    else
      cli_dir_list_command
    fi
  
  elif [[ $action == "dir remove" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_dir_remove_usage
    else
      cli_dir_remove_command
    fi
  
  elif [[ $action == "file" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_file_usage
    else
      cli_file_command
    fi
  
  elif [[ $action == "file show" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_file_show_usage
    else
      cli_file_show_command
    fi
  
  elif [[ $action == "file edit" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_file_edit_usage
    else
      cli_file_edit_command
    fi
  
  elif [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    cli_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
