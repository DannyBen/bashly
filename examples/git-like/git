#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
git_usage() {
  if [[ -n $long_usage ]]; then
    printf "git - Git example\n"
    echo 
  else
    printf "git - Git example\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  git [command]\n"
  printf "  git [command] --help | -h\n"
  printf "  git --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  status   Show repository status"
  echo "  commit   Commit changes"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
git_status_usage() {
  if [[ -n $long_usage ]]; then
    printf "git status - Show repository status\n"
    echo 
  else
    printf "git status - Show repository status\n"
    echo 
  fi

  printf "Shortcut: s*\n"
  echo

  printf "Usage:\n"
  printf "  git status\n"
  printf "  git status --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
git_commit_usage() {
  if [[ -n $long_usage ]]; then
    printf "git commit - Commit changes\n"
    echo 
  else
    printf "git commit - Commit changes\n"
    echo 
  fi

  printf "Shortcut: c*\n"
  echo

  printf "Usage:\n"
  printf "  git commit [options]\n"
  printf "  git commit --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --message, -m MESSAGE"
    printf "    Commit message\n"
    echo
    
    # :flag.usage
    echo "  --all, -a"
    printf "    Automatically stage files\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
git_status_command() {
  # :src/status_command.sh
  echo "# this file is located in 'src/status_command.sh'"
  echo "# code for 'git status' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
git_commit_command() {
  # :src/commit_command.sh
  echo "# this file is located in 'src/commit_command.sh'"
  echo "# code for 'git commit' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    git_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  status | s* )
    action="status"
    shift
    git_status_parse_requirements "$@"
    shift $#
    ;;    
  
  commit | c* )
    action="commit"
    shift
    git_commit_parse_requirements "$@"
    shift $#
    ;;    
  
  # :command.command_fallback
  * )
    git_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
git_status_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    git_status_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="status"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
git_commit_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    git_commit_usage
    exit
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="commit"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --message | -m )
      if [[ $2 ]]; then
        args[--message]="$2"
        shift
        shift
      else
        printf "%s\n" "--message requires an argument: --message, -m MESSAGE"
        exit 1
      fi
      ;;
  
    # :flag.case
    --all | -a )
      args[--all]=1
      shift
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
    printf "bash version 4 or higher is required\n"
    exit 1
  fi

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  declare -a other_args
  parse_requirements "$@"

  if [[ $action == "status" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      git_status_usage
    else
      git_status_command
    fi
  
  elif [[ $action == "commit" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      git_commit_usage
    else
      git_commit_command
    fi
  
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
