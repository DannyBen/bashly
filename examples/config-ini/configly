#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
configly_usage() {
  if [[ -n $long_usage ]]; then
    printf "configly - Sample application that uses the config functions\n"
    echo 
  else
    printf "configly - Sample application that uses the config functions\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  configly [command] [options]\n"
  printf "  configly [command] --help | -h\n"
  printf "  configly --version\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  set    Save a value in the config file"
  echo "  get    Read a value from the config file"
  echo "  list   Show the entire config file"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
configly_set_usage() {
  if [[ -n $long_usage ]]; then
    printf "configly set - Save a value in the config file\n"
    echo 
  else
    printf "configly set - Save a value in the config file\n"
    echo 
  fi

  printf "Shortcut: s\n"
  echo

  printf "Usage:\n"
  printf "  configly set KEY VALUE [options]\n"
  printf "  configly set --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  KEY"
    printf "    Config key\n"
    echo
    
    # :argument.usage
    echo "  VALUE"
    printf "    Config value\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  configly set hello world\n"
    echo

  fi
}

# :command.usage
configly_get_usage() {
  if [[ -n $long_usage ]]; then
    printf "configly get - Read a value from the config file\n"
    echo 
  else
    printf "configly get - Read a value from the config file\n"
    echo 
  fi

  printf "Shortcut: g\n"
  echo

  printf "Usage:\n"
  printf "  configly get KEY [options]\n"
  printf "  configly get --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  KEY"
    printf "    Config key\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  configly set hello\n"
    echo

  fi
}

# :command.usage
configly_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "configly list - Show the entire config file\n"
    echo 
  else
    printf "configly list - Show the entire config file\n"
    echo 
  fi

  printf "Shortcut: l\n"
  echo

  printf "Usage:\n"
  printf "  configly list [options]\n"
  printf "  configly list --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.user_lib
# :src/lib/config.sh
# ---
# Config functions
# This file is a part of Bashly standard library
#
# Usage:
# - In your script, set the CONFIG_FILE variable. For rxample:
#   CONFIG_FILE=settings.ini.
#   If it is unset, it will default to 'config.ini'.
# - Use any of the functions below to access the config file.
# ---

# Create a new config file.
# There is normally no need to use this fucntion, it is used by other
# functions as needed.
config_init() {
  CONFIG_FILE=${CONFIG_FILE:=config.ini}
  [[ -f "$CONFIG_FILE" ]] || touch "$CONFIG_FILE"
}

# Get a value from the config
# Usage: result=$(config_get hello)
config_get() {
  key=$1
  regex="^$key\s*=\s*(.+)$"

  config_init
  
  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line =~ $regex ]]; then
      value="${BASH_REMATCH[1]}"
      break
    fi
  done < "$CONFIG_FILE"

  echo "$value"
}

# Add or update a key=value pair in the config.
# Usage: config_set key value
config_set() {
  key=$1
  shift
  value="$*"

  config_init

  regex="^($key)\s*=\s*.+$"
  output=""
  found_key=""
  
  while IFS= read -r line || [ -n "$line" ]; do
    newline=$line
    if [[ $line =~ $regex ]]; then
      found_key="${BASH_REMATCH[1]}"
      newline="$key = $value"
      output="$output$newline\n"
    elif [[ $line ]]; then
      output="$output$line\n"
    fi
  done < "$CONFIG_FILE"

  if [[ -z $found_key ]]; then
    output="$output$key = $value\n"
  fi

  printf "%b\n" "$output" > "$CONFIG_FILE"
}

# Delete a key from teh config.
# Usage: config_del key
config_del() {
  key=$1

  regex="^($key)\s*="
  output=""

  config_init

  while IFS= read -r line || [ -n "$line" ]; do
    newline=$line
    if [[ $line ]] && [[ ! $line =~ $regex ]]; then
      output="$output$line\n"
    fi
  done < "$CONFIG_FILE"

  printf "%b\n" "$output" > "$CONFIG_FILE"
}

# Show the config file
config_show() {
  config_init
  cat "$CONFIG_FILE"
}

# Return an array of the keys in the config file
# Usage:
#
#   for k in $(config_keys); do
#     echo "- $k = $(config_get "$k")";
#   done
#
config_keys() {
  regex="^(.*)\s*="

  config_init

  keys=()
  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line =~ $regex ]]; then
      key="${BASH_REMATCH[1]}"
      keys+=("$key")
    fi
  done < "$CONFIG_FILE"
  echo "${keys[@]}"
}

# :command.command_functions
# :command.function
configly_set_command() {
  # :src/set_command.sh
  # Using the standard library (lib/config.sh) to store a value to the config
  config_set "${args[key]}" "${args[value]}"
  echo "saved: ${args[key]} = ${args[value]}"
}

# :command.function
configly_get_command() {
  # :src/get_command.sh
  # Using the standard library (lib/config.sh) to show a value from the config
  config_get "${args[key]}"
  
  # Example of how to assign the config value to a variable:
  # result=$(config_get "${args[key]}")
  # echo $result
}

# :command.function
configly_list_command() {
  # :src/list_command.sh
  # Using the standard library (lib/config.sh) to show the entire config file
  config_show
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    configly_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  set | s )
    action="set"
    shift
    configly_set_parse_requirements "$@"
    shift $#
    ;;    
  
  get | g )
    action="get"
    shift
    configly_get_parse_requirements "$@"
    shift $#
    ;;    
  
  list | l )
    action="list"
    shift
    configly_list_parse_requirements "$@"
    shift $#
    ;;    
  
  * )
    configly_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
}

# :command.parse_requirements
configly_set_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    configly_set_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="set"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[key]=$1
    shift
  else
    printf "missing required argument: KEY\nusage: configly set KEY VALUE [options]\n"
    exit 1
  fi
  
  if [[ $1 && $1 != -* ]]; then
    args[value]=$1
    shift
  else
    printf "missing required argument: VALUE\nusage: configly set KEY VALUE [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[key]} ]]; then
        args[key]=$1
        shift
      elif [[ ! ${args[value]} ]]; then
        args[value]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
}

# :command.parse_requirements
configly_get_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    configly_get_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="get"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[key]=$1
    shift
  else
    printf "missing required argument: KEY\nusage: configly get KEY [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[key]} ]]; then
        args[key]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
}

# :command.parse_requirements
configly_list_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    configly_list_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="list"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  parse_requirements "$@"

  if [[ $action == "set" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      configly_set_usage
    else
      configly_set_command
    fi
  
  elif [[ $action == "get" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      configly_get_usage
    else
      configly_get_command
    fi
  
  elif [[ $action == "list" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      configly_list_usage
    else
      configly_list_command
    fi
  
  elif [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    configly_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
