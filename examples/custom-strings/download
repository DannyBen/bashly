#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.root_command
root_command() {
  # :src/root_command.sh
  echo "# this file is located in 'src/root_command.sh'"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
download_usage() {
  if [[ -n $long_usage ]]; then
    printf "download - Sample minimal application with custom strings\n"
    echo 
  else
    printf "download - Sample minimal application with custom strings\n"
    echo 
  fi

  printf "== Usage ==\n\n"
  printf "  download SOURCE [options]\n"
  printf "  download --help | -h\n"
  printf "  download --version | -v\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "== Options ==\n\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this helpful help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --out, -o DIR (required)"
    printf "    Target directory\n"
    echo
    # :command.usage_args
    printf "== Arguments ==\n\n"
    
    # :argument.usage
    echo "  SOURCE"
    printf "    URL to download from\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  keys=( $( echo ${!args[@]} | tr ' ' $'\n' | sort ) )
  echo args:
  for k in "${keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    download_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="root"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[source]=$1
    shift
  else
    printf "Boom! a required argument is missing: SOURCE\nusage: download SOURCE [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  argstring="$*"
  if [[ "$argstring" != *--out* && "$argstring" != *-o* ]]; then
    printf "Yo! you forgot a flag: --out, -o DIR\n"
    exit 1
  fi
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --out | -o )
      if [[ $2 && $2 != -* ]]; then
        args[--out]="$2"
        shift
        shift
      else
        printf "%s\n" "Hey! the flag --out requires an argument: --out, -o DIR"
        exit 1
      fi
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[source]} ]]; then
        args[source]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  parse_requirements "$@"

  if [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    download_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
