#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
multi_usage() {
  if [[ -n $long_usage ]]; then
    printf "multi\n"
    echo 
    printf "  Multiline test\n  \n  This is a multiline test example. Long lines are going to be properly wrapped\n  at the 80 character mark.\n"
    echo 
  else
    printf "multi - Multiline test\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  multi [command] [options]\n"
  printf "  multi [command] --help | -h\n"
  printf "  multi --version\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  multiline   Do some multiline work."
  echo "  regular     Standard help line"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"
    
    # :environment_variable.usage
    echo "  MULTI_VITAMIN"
    printf "    Environment variables can also use multiple lines. This can be useful if we\n    need to explain - in excruciating detail - what the environemnt variable is\n    used for.\n"
    echo
    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  Examples can also use multiple lines. This can be useful if we need to explain\n  the example, for instance like we are doing here:\n  \n    multi multiline --flag\n"
    echo

  fi
}

# :command.usage
multi_multiline_usage() {
  if [[ -n $long_usage ]]; then
    printf "multi multiline\n"
    echo 
    printf "  Do some multiline work.\n  \n  This is a long process and takes time, therefore it takes a lot of lines to\n  describe and this line is particularly long.\n  \n  But - not all hope is lost. Bashly should respect newlines and word-wrap long\n  lines properly at the 80 character mark.\n"
    echo 
  else
    printf "multi multiline - Do some multiline work.\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  multi multiline [MY_ARG] [options]\n"
  printf "  multi multiline --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --long"
    printf "    Long flag with long text.\n    \n    Finally, this will be the last multiline string we type (hopefully), but\n    once we are done with this, we will be done with all.\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  MY_ARG"
    printf "    Argument with multiline.\n    \n    Once again we gather here to prepare some long lines that will most likely\n    seem silly to anyone who reads them.\n    \n    But, it is just needed for testing - otherwise, it will not only be silly,\n    but it will also be buggy!\n"
    echo

  fi
}

# :command.usage
multi_regular_usage() {
  if [[ -n $long_usage ]]; then
    printf "multi regular - Standard help line\n"
    echo 
  else
    printf "multi regular - Standard help line\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  multi regular [REPO] [options]\n"
  printf "  multi regular --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  REPO"
    printf "    Repository name\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.command_functions
# :command.function
multi_multiline_command() {
  # :src/multiline_command.sh
  echo "# this file is located in 'src/multiline_command.sh'"
  echo "# code for 'multi multiline' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
multi_regular_command() {
  # :src/regular_command.sh
  echo "# this file is located in 'src/regular_command.sh'"
  echo "# code for 'multi regular' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    multi_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  multiline )
    action="multiline"
    shift
    multi_multiline_parse_requirements "$@"
    shift $#
    ;;    
  
  regular )
    action="regular"
    shift
    multi_regular_parse_requirements "$@"
    shift $#
    ;;    
  
  * )
    multi_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
}

# :command.parse_requirements
multi_multiline_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    multi_multiline_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="multiline"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --long )
      args[--long]=1
      shift
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[my_arg]} ]]; then
        args[my_arg]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
}

# :command.parse_requirements
multi_regular_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit 1
    ;;
  
  --help | -h )
    long_usage=yes
    multi_regular_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="regular"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[repo]} ]]; then
        args[repo]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  parse_requirements "$@"

  if [[ $action == "multiline" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      multi_multiline_usage
    else
      multi_multiline_command
    fi
  
  elif [[ $action == "regular" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      multi_regular_usage
    else
      multi_regular_command
    fi
  
  elif [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    multi_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
