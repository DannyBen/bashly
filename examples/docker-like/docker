#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
docker_usage() {
  if [[ -n $long_usage ]]; then
    printf "docker - Docker example\n"
    echo 
  else
    printf "docker - Docker example\n"
    echo 
  fi
  printf "Usage:\n"
  printf "  docker [command] [options]\n"
  printf "  docker [command] --help | -h\n"
  printf "  docker --version\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  container   Container commands"
  echo "  image       Image commands"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
docker_container_usage() {
  if [[ -n $long_usage ]]; then
    printf "docker container - Container commands\n"
    echo 
  else
    printf "docker container - Container commands\n"
    echo 
  fi
  printf "Usage:\n"
  printf "  docker container [command] [options]\n"
  printf "  docker container [command] --help | -h\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  run    Run a container"
  echo "  stop   Stop a container"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
docker_container_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "docker container run - Run a container\n"
    echo 
  else
    printf "docker container run - Run a container\n"
    echo 
  fi
  printf "Usage:\n"
  printf "  docker container run IMAGE [options]\n"
  printf "  docker container run --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  IMAGE"
    printf "    Image name\n"
    echo

  fi
}

# :command.usage
docker_container_stop_usage() {
  if [[ -n $long_usage ]]; then
    printf "docker container stop - Stop a container\n"
    echo 
  else
    printf "docker container stop - Stop a container\n"
    echo 
  fi
  printf "Usage:\n"
  printf "  docker container stop CONTAINER [options]\n"
  printf "  docker container stop --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  CONTAINER"
    printf "    Container name\n"
    echo

  fi
}

# :command.usage
docker_image_usage() {
  if [[ -n $long_usage ]]; then
    printf "docker image - Image commands\n"
    echo 
  else
    printf "docker image - Image commands\n"
    echo 
  fi
  printf "Usage:\n"
  printf "  docker image [command] [options]\n"
  printf "  docker image [command] --help | -h\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  ls   Show all images"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
docker_image_ls_usage() {
  if [[ -n $long_usage ]]; then
    printf "docker image ls - Show all images\n"
    echo 
  else
    printf "docker image ls - Show all images\n"
    echo 
  fi
  printf "Usage:\n"
  printf "  docker image ls [options]\n"
  printf "  docker image ls --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.command_functions

# :command.function
docker_container_run_command() {
  # :src/container_run_command.sh
  echo "# this file is located in 'src/container_run_command.sh'"
  echo "# code for 'docker container run' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
docker_container_stop_command() {
  # :src/container_stop_command.sh
  echo "# this file is located in 'src/container_stop_command.sh'"
  echo "# code for 'docker container stop' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
docker_image_ls_command() {
  # :src/image_ls_command.sh
  echo "# this file is located in 'src/image_ls_command.sh'"
  echo "# code for 'docker image ls' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    docker_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  container | c* )
    action="container"
    shift
    docker_container_parse_requirements "$@"
    shift $#
    ;;    
  
  image | i* )
    action="image"
    shift
    docker_image_parse_requirements "$@"
    shift $#
    ;;    
  
  * )
    docker_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
}

# :command.parse_requirements
docker_container_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    docker_container_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  run )
    action="run"
    shift
    docker_container_run_parse_requirements "$@"
    shift $#
    ;;    
  
  stop )
    action="stop"
    shift
    docker_container_stop_parse_requirements "$@"
    shift $#
    ;;    
  
  * )
    docker_container_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
}

# :command.parse_requirements
docker_container_run_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    docker_container_run_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="container run"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[image]=$1
    shift
  else
    printf "missing required argument: IMAGE\nusage: docker container run IMAGE [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[image]} ]]; then
        args[image]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
}

# :command.parse_requirements
docker_container_stop_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    docker_container_stop_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="container stop"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[container]=$1
    shift
  else
    printf "missing required argument: CONTAINER\nusage: docker container stop CONTAINER [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[container]} ]]; then
        args[container]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
}

# :command.parse_requirements
docker_image_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    docker_image_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  ls | l )
    action="ls"
    shift
    docker_image_ls_parse_requirements "$@"
    shift $#
    ;;    
  
  * )
    docker_image_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
}

# :command.parse_requirements
docker_image_ls_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    docker_image_ls_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="image ls"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;
  
    esac
  done
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  parse_requirements "$@"

  if [[ $action == "container" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      docker_container_usage
    else
      docker_container_command
    fi
  
  elif [[ $action == "container run" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      docker_container_run_usage
    else
      docker_container_run_command
    fi
  
  elif [[ $action == "container stop" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      docker_container_stop_usage
    else
      docker_container_stop_command
    fi
  
  elif [[ $action == "image" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      docker_image_usage
    else
      docker_image_command
    fi
  
  elif [[ $action == "image ls" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      docker_image_ls_usage
    else
      docker_image_ls_command
    fi
  
  elif [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    docker_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
