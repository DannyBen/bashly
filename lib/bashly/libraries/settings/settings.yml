# All settings are optional (with their default values provided below), and
# can also be set with an environment variable with the same name, capitalized
# and prefixed by `BASHLY_` - for example: BASHLY_SOURCE_DIR
#
# When setting environment variables, you can use:
# - "0", "false" or "no" to represent false
# - "1", "true" or "yes" to represent true
#
# If you wish to change the path to this file, set the environment variable
# BASHLY_SETTINGS_PATH.


#-------------------------------------------------------------------------------
# PATH OPTIONS
#-------------------------------------------------------------------------------

# The path containing the bashly source files
source_dir: src

# The path to bashly.yml
config_path: "%{source_dir}/bashly.yml"

# The path to use for creating the bash script
target_dir: .

# The path to use for common library files, relative to source_dir
lib_dir: lib

# The path to use for command files, relative to source_dir
# When set to nil (~), command files will be placed directly under source_dir
# When set to any other string, command files will be placed under this
# directory, and each command will get its own subdirectory
commands_dir: ~

# The extension to use when reading/writing partial script snippets
partials_extension: sh


#-------------------------------------------------------------------------------
# FORMAT OPTIONS
#-------------------------------------------------------------------------------

# Configure the bash options that will be added to the initialize function:
# strict: true       Bash strict mode (set -euo pipefail)
# strict: false      Only exit on errors (set -e)
# strict: ''         Do not add any 'set' directive
# strict: <string>   Add any other custom 'set' directive
strict: false

# When true, the generated script will use tab indentation instead of spaces
# (every 2 leading spaces will be converted to a tab character)
tab_indent: false


#-------------------------------------------------------------------------------
# INTERFACE OPTIONS
#-------------------------------------------------------------------------------

# When true, the generated script will consider any argument in the form of
# `-abc` as if it is `-a -b -c`.
compact_short_flags: true

# When true, the generated script will consider any argument in the form of
# `--flag=value` and `-f=value` as if it is `--flag value` and `-f value`
# respectively.
conjoined_flag_args: true

# Show command examples (if any) whenever the user does not provide the
# required arguments
show_examples_on_error: false

# When using private commands, flags, or environment variables, you may set 
# this option to a name of an environment variable that, if set, will reveal
# all the private elements in the usage texts, as if they were public.
private_reveal_key: ~

# Display various usage elements in color by providing the name of the color
# function. The value for each property is a name of a function that is
# available in your script, for example: `green` or `bold`.
# You can run `bashly add colors` to add a standard colors library.
# This option cannot be set via environment variables.
usage_colors:
  caption: ~
  command: ~
  arg: ~
  flag: ~
  environment_variable: ~


#-------------------------------------------------------------------------------
# FEATURE TOGGLES
#-------------------------------------------------------------------------------

# Set to 'production' or 'development'.
# Determines which features are enabled in the rendered script.
# Use the `enable_*` options below to adjust settings for each environment.
# It is recommended to leave this set to 'development' and run
# `bashly generate --production` when the slimmer production script is needed.
env: development

# Tweak the script output by enabling or disabling some script output.
# These options accept one of the following strings:
# - production      render this feature only when env == production
# - development     render this feature only when env == development
# - always          render this feature in any environment
# - never           do not render this feature
enable_header_comment: always
enable_bash3_bouncer: always
enable_view_markers: development
enable_inspect_args: development
enable_deps_array: always
enable_env_var_names_array: always
enable_sourcing: development


#-------------------------------------------------------------------------------
# SCRIPTING OPTIONS
#-------------------------------------------------------------------------------

# These are the public global variables available for use in your partial
# scripts. Adding a new name here will create a reference variable using
# `declare -gn`, allowing you to access the original variable under the new
# name in addition to its original name.
var_aliases:
  args: ~
  other_args: ~
  deps: ~
  env_var_names: ~

# Choose different names for some of the internal functions.
function_names:
  run: ~
  initialize: ~
